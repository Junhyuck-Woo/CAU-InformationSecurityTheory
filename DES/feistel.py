from calculator import *
from converter import *

class Feistel(object):
    
    sb1 = [["14", "04", "13", "01", "02", "15", "11", "08", "03", "10", "06", "12", "05", "09", "00", "07"], 
           ["00", "15", "07", "04", "14", "02", "13", "10", "03", "06", "12", "11", "09", "05", "03", "08"], 
           ["04", "01", "14", "08", "13", "06", "02", "11", "15", "12", "09", "07", "03", "10", "05", "00"], 
           ["15", "12", "08", "02", "04", "09", "01", "07", "05", "11", "03", "14", "10", "00", "06", "13"]]
    sb2 = [["15", "01", "08", "14", "06", "11", "03", "04", "09", "07", "02", "13", "12", "00", "05", "10"], 
           ["03", "13", "04", "07", "15", "02", "08", "14", "12", "00", "01", "10", "06", "09", "11", "05"],
           ["00", "14", "07", "11", "10", "04", "13", "01", "05", "08", "12", "06", "09", "03", "02", "15"], 
           ["13", "08", "10", "01", "03", "15", "04", "02", "11", "06", "07", "12", "00", "05", "14", "09"]]
    sb3 = [["10", "00", "09", "14", "06", "03", "15", "05", "01", "13", "12", "07", "11", "04", "02", "08"], 
           ["13", "07", "00", "09", "03", "04", "06", "10", "02", "08", "05", "14", "12", "11", "15", "01"],
           ["13", "06", "04", "09", "08", "15", "03", "00", "11", "01", "02", "12", "05", "10", "14", "07"], 
           ["01", "10", "13", "00", "06", "09", "08", "07", "04", "15", "14", "03", "11", "05", "02", "12"]]
    sb4 = [["07", "13", "14", "03", "00", "06", "09", "10", "01", "02", "08", "05", "11", "12", "04", "15"], 
           ["13", "08", "11", "05", "06", "15", "00", "03", "04", "07", "02", "12", "01", "10", "14", "09"],
           ["10", "06", "09", "00", "12", "11", "07", "13", "15", "01", "03", "14", "05", "02", "08", "04"], 
           ["03", "15", "00", "06", "10", "01", "13", "08", "09", "04", "05", "11", "12", "07", "02", "14"]]
    sb5 = [["02", "12", "04", "01", "07", "10", "11", "06", "08", "05", "03", "15", "13", "00", "14", "09"], 
           ["14", "11", "02", "12", "04", "07", "13", "01", "05", "00", "15", "10", "03", "09", "08", "06"],
           ["04", "02", "01", "11", "10", "13", "07", "08", "15", "09", "12", "05", "06", "03", "00", "14"], 
           ["11", "08", "12", "07", "01", "14", "02", "13", "06", "15", "00", "09", "10", "04", "05", "03"]]
    sb6 = [["12", "01", "10", "15", "09", "02", "06", "08", "00", "13", "03", "04", "14", "07", "05", "11"], 
           ["10", "15", "04", "02", "07", "12", "09", "05", "06", "01", "13", "14", "00", "11", "03", "08"],
           ["09", "14", "15", "05", "02", "08", "12", "03", "07", "00", "04", "10", "01", "13", "11", "06"], 
           ["04", "03", "02", "12", "09", "05", "15", "10", "11", "14", "01", "07", "10", "00", "08", "13"]]
    sb7 = [["04", "11", "02", "14", "15", "00", "08", "13", "03", "12", "09", "07", "05", "10", "06", "01"], 
           ["13", "00", "11", "07", "04", "09", "01", "10", "14", "03", "05", "12", "02", "15", "08", "06"],
           ["01", "04", "11", "13", "12", "03", "07", "14", "10", "15", "06", "08", "00", "05", "09", "02"], 
           ["06", "11", "13", "08", "01", "04", "10", "07", "09", "05", "00", "15", "14", "02", "03", "12"]]
    sb8 = [["13", "02", "08", "04", "06", "15", "11", "01", "10", "09", "03", "14", "05", "00", "12", "07"], 
           ["01", "15", "13", "08", "10", "03", "07", "04", "12", "05", "06", "11", "10", "14", "09", "02"],
           ["07", "11", "04", "01", "09", "12", "14", "02", "00", "06", "10", "13", "15", "03", "05", "08"],
           ["02", "01", "14", "07", "04", "10", "08", "13", "15", "12", "09", "00", "03", "05", "06", "11"]]
    sb_array = [sb1, sb2, sb3, sb4, sb5, sb6, sb7, sb8]

    def __init__(self):
        cal = Calculator()
        conv = Converter()
        pass

    def __mixer(self, l, r, k):
        right = r
        f_ = self.__des_function(r, k)
        left = cal.xor(l, f_)
        return left, right

    def __swapper(self, l, r):
        mid_code = r + l
        return mid_code

    def __expansion(self, r):
        output = r[31] + r[0:4] + a[4] + \
        r[3] + r[4:8] + r[8] + \
        r[7] + r[8:12] + r[12] + \
        r[11] + r[12:16] + r[16] + \
        r[15] + r[16:20] + r[20] + \
        r[19] + r[20:24] + r[24] + \
        r[23] + r[24:28] + r[28] + \
        r[27] + r[28:32] + r[0]
        return output

    def __sbox(self, r):
        s = 0
        e = 5
        for sb in ab_array:
            row = r[s] + r[e]
            col = r[s+1:e]
            s += 6
            e += 6
            row = int(conv.bin_to_dec(row))
            col = int(conv.bin_to_dec(col))
            num = sb[row][col]
            output += conv.hex_to_bin(num)
        return output

    def __straight(self, r):
        output = r[15] + r[6] + r[19] + r[20] + r[28] + r[11] + r[27] + r[16] + \
        r[0] + r[14] + r[22] + r[25] + r[4] + r[17] + r[30] + r[9] + \
        r[1] + [7] + r[23] + r[13] + r[31] + r[26] + r[2] + r[8] + \
        r[18] + r[12] + r[29] + r[5] + r[21] + r[10] + r[3] + r[24]
        return output

    def __des_function(self, r, k):
        mid = __expansion(r)
        mid = cal.xor(mid, k)
        mid = __sbox(mid)
        mid = __straight(mid)
        return mid

    def run(self, input_string, key):
        left_text = input_string[:32]
        right_text = input_string[31:]
        left_text, right_text = self.__mixer(left_text, right_text, key)
        mid_code = self.__swapper(left_text, right_text)
        
        return mid_code